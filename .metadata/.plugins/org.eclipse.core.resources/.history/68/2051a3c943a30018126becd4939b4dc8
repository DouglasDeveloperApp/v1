package br.com.mouseweb.services;

import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import br.com.mouseweb.domain.Cliente;
import br.com.mouseweb.exceptions.ObjectNotFoundException;
import br.com.mouseweb.repositories.ClienteRepository;

@Service
public class ClienteService {

	@Autowired
	private ClienteRepository repo;

	public Cliente buscar(Integer id) {
		Optional<Cliente> obj = repo.findById(id);
		return obj.orElseThrow(() -> new ObjectNotFoundException(
				"Objeto n√£o encontrado! Id: " + id + ", Tipo: " + Cliente.class.getName()));
	}

	@RequestMapping(value = "/email", method = RequestMethod.GET)

	public ResponseEntity<Cliente> find(@RequestParam(value = "value") String email) {

		Cliente obj = service.findByEmail(email);

		return ResponseEntity.ok().body(obj);

	}

	@RequestMapping(method = RequestMethod.POST)

	public ResponseEntity<Void> insert(@Valid @RequestBody ClienteNewDTO objDto) {

		Cliente obj = service.fromDTO(objDto);

		obj = service.insert(obj);

		URI uri = ServletUriComponentsBuilder.fromCurrentRequest()

				.path("/{id}").buildAndExpand(obj.getId()).toUri();

		return ResponseEntity.created(uri).build();

	}

	@RequestMapping(value = "/{id}", method = RequestMethod.PUT)

	public ResponseEntity<Void> update(@Valid @RequestBody ClienteDTO objDto, @PathVariable Integer id) {

		Cliente obj = service.fromDTO(objDto);

		obj.setId(id);

		obj = service.update(obj);

		return ResponseEntity.noContent().build();

	}

	@PreAuthorize("hasAnyRole('ADMIN')")

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)

	public ResponseEntity<Void> delete(@PathVariable Integer id) {

		service.delete(id);

		return ResponseEntity.noContent().build();

	}

	@PreAuthorize("hasAnyRole('ADMIN')")

	@RequestMapping(method = RequestMethod.GET)

	public ResponseEntity<List<ClienteDTO>> findAll() {

		List<Cliente> list = service.findAll();

		List<ClienteDTO> listDto = list.stream().map(obj -> new ClienteDTO(obj)).collect(Collectors.toList());

		return ResponseEntity.ok().body(listDto);

	}

	@PreAuthorize("hasAnyRole('ADMIN')")

	@RequestMapping(value = "/page", method = RequestMethod.GET)

	public ResponseEntity<Page<ClienteDTO>> findPage(

			@RequestParam(value = "page", defaultValue = "0") Integer page,

			@RequestParam(value = "linesPerPage", defaultValue = "24") Integer linesPerPage,

			@RequestParam(value = "orderBy", defaultValue = "nome") String orderBy,

			@RequestParam(value = "direction", defaultValue = "ASC") String direction) {

		Page<Cliente> list = service.findPage(page, linesPerPage, orderBy, direction);

		Page<ClienteDTO> listDto = list.map(obj -> new ClienteDTO(obj));

		return ResponseEntity.ok().body(listDto);

	}

	@RequestMapping(value = "/picture", method = RequestMethod.POST)

	public ResponseEntity<Void> uploadProfilePicture(@RequestParam(name = "file") MultipartFile file) {

		URI uri = service.uploadProfilePicture(file);

		return ResponseEntity.created(uri).build();

	}

}